//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/totem.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define NAV  1
#define DIG  2
#define SYS  3
#define QUICK_TAP_MS 175

/* Timeless homerow mods */
// https://github.com/urob/zmk-config/tree/main#timeless-homerow-mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2 // thumb cluster for both hands

// proper urob's home row, uncomment it if you are not going to use visual editor
//#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
//    ZMK_HOLD_TAP(NAME, \
//        flavor = "balanced"; \
//        tapping-term-ms = <280>; \
//        quick-tap-ms = <QUICK_TAP_MS>; \
//        require-prior-idle-ms = <150>; \
//        bindings = <HOLD>, <TAP>; \
//        hold-trigger-key-positions = <TRIGGER_POS>; \
//        hold-trigger-on-release; \
//    )
//
//MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
//MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs
//MAKE_HRM(hml_layer, &mo, &kp, KEYS_R THUMBS) // switch layer like HRM

&mt {
    quick-tap-ms = <130>;
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    require-prior-idle-ms = <130>;
};

/ {
    combos {
        compatible = "zmk,combos";

        Backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 17>;
            timeout-ms = <70>;
        };

        to_Base_layer {
            bindings = <&to 0>;
            key-positions = <32 37>;
        };

        capsWord {
            bindings = <&caps_word>;
            key-positions = <11 12 13>;
        };

        Del {
            bindings = <&kp DEL>;
            key-positions = <17 18>;
        };

        LMeta {
            bindings = <&kp LEFT_GUI>;
            key-positions = <1 2>;
        };

        RMeta {
            bindings = <&kp RIGHT_GUI>;
            key-positions = <7 8>;
        };

        LAlt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <2 3>;
        };

        RAlt {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <7 6>;
        };
    };

    macros {
        /**
         * Temporarily switches to a layer (`&mo`) while a modifier is held.
         * Analogous to QMK's `LM()`, using a parameterized macro.
         *
         * Params:
         *  1. Layer to switch to
         *  2. Modifier to press while layer is active
         *
         * Example:
         *  `&lm NUM_LAYER LSHIFT`
         */

        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        twoKP: twoKP {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>;
        };

        more_or_equal: more_or_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "MORE_OR_EQUAL";
        };

        less_or_equal: less_or_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp EQUAL>;
            label = "LESS_OR_EQUAL";
        };

        fun_arrow_right: fun_arrow_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "FUN_ARROW_RIGHT";
        };

        slashStar: slashStar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp FSLH &kp STAR>;
            label = "MACROS_COMMENT";
        };
    };

    behaviors {
        // this is homerow mod that works identical to urob's one, but this one allows visual editor to understand

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        hSlashStar: hSlashStar {
            compatible = "zmk,behavior-hold-tap";
            label = "hSlashStar";
            bindings = <&slashStar>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        escOrTab_XXX: escOrTab_XXX {
            compatible = "zmk,behavior-mod-morph";
            label = "ESCORTAB_XXX";
            bindings = <&kp ESC>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        tLay_hMod: tLay_hMod {
            compatible = "zmk,behavior-hold-tap";
            label = "TLAY_HMOD";
            bindings = <&kp>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        ColemakDH {
            label = "BASE";
            bindings = <
             &kp Q  &kp W  &kp F            &kp P          &kp B                      &kp J                &kp L      &kp U             &kp Y    &kp SEMICOLON
             &kp A  &kp R  &kp S            &kp T          &kp G                      &kp M                &kp N      &kp E             &kp I    &kp O
&mt ESC TAB  &kp Z  &kp X  &kp C            &kp D          &kp V                      &kp K                &kp H      &kp COMMA         &kp DOT  &hSlashStar 0 SLASH  &mt DQT SQT
                           &hml LCTRL CAPS  &kp BACKSPACE  &tLay_hMod LEFT_SHIFT 1    &tLay_hMod RSHIFT 2  &kp SPACE  &hmr RCTRL ENTER
            >;
        };

        digits {
            label = "Digits";
            bindings = <
        &mt PIPE BSLH    &mt AMPS DOLLAR    &kp UNDER                        &kp EQUAL                          &twoKP GREATER_THAN EQUAL    &kp KP_PLUS         &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp SEMICOLON
        &mt POUND EXCL   &kp AT             &mt LEFT_BRACE LEFT_PARENTHESIS  &mt RIGHT_BRACE RIGHT_PARENTHESIS  &twoKP MINUS GREATER_THAN    &kp KP_MINUS        &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_ASTERISK
&trans  &mt TILDE GRAVE  &mt CARET PERCENT  &mt LEFT_BRACKET LESS_THAN       &mt RIGHT_BRACKET GREATER_THAN     &twoKP LESS_THAN EQUAL       &kp KP_N0           &kp KP_N1  &kp KP_N2  &kp KP_N3  &mt COMMA KP_DOT  &kp KP_DIVIDE
                                            &trans                           &trans                             &tLay_hMod LSHFT 0           &tLay_hMod RSHFT 0  &trans     &trans
            >;
        };

        Navigation {
            label = "Navigation";
            bindings = <
        &mkp MB4  &mkp MB5  &msc SCRL_LEFT  &msc SCRL_RIGHT  &none                 &kp LC(X)           &msc SCRL_UP  &msc SCRL_DOWN  &kp PAGE_UP         &kp PAGE_DOWN
        &mkp MB2  &mkp MB1  &mmv MOVE_LEFT  &mmv MOVE_RIGHT  &none                 &kp LC(C)           &mmv MOVE_UP  &mmv MOVE_DOWN  &mkp MB3            &none
&trans  &kp HOME  &kp END   &kp LEFT_ARROW  &kp RIGHT_ARROW  &none                 &kp LC(V)           &kp UP_ARROW  &kp DOWN_ARROW  &kp LC(LEFT_ARROW)  &kp LC(RIGHT_ARROW)  &kp PRINTSCREEN
                            &trans          &trans           &tLay_hMod LSHFT 3    &tLay_hMod RSHFT 0  &trans        &trans
            >;
        };

        sim_layer {
            label = "SYSTEM";
            bindings = <
            &kp F1  &kp F2  &kp F3        &kp F4      &kp F5        &kp F6        &kp F7        &kp F8      &kp F9      &kp F10
            &none   &none   &none         &none       &none         &kp C_MUTE    &kp C_PP      &none       &none       &none
&bt BT_CLR  &none   &none   &out OUT_TOG  &bt BT_PRV  &bt BT_NXT    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PREV  &kp C_NEXT  &none    &none
                            &trans        &trans      &trans        &to 0         &trans        &trans
            >;
        };
    };
};
